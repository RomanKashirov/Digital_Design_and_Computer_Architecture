# Проверка разрешения конфликтов в конвейерном MIPS-процессоре

# Разрешение конфликтов данных пересылкой через байпас

				#	Assembly               Description                    	  Address   Machine
				addi	$s2, $0, 6725		# s2 = 6725							0
				addi	$s3, $0, 2138		# s3 = 2138							4
				addi	$s1, $0, 6666		# s1 = 6666							8
				addi	$s4, $0, 10948		# s4 = 10948						c
				
				add		$s0, $s2, $s3		# s0 = 6725 + 2138 = 8863		 	10
				and		$t0, $s0, $s1		# t0 = 8863 AND 6666 = 522			14
				or		$t1, $s4, $s0		# t1 = 10948 OR 8863 = 10975		18
				add		$t0, $t0, $t1		# t0 = 10975 + 522 = 11497			1c
				sw    	$t0, 80($0)			# dmem[80] = 11497					20
				
# Разрешение конфликта данных приостановкой конвейера
				lw  	$s0, 80($0)			# s0 = 11497						24
				and 	$t1, $s0, $s1		# t1 = 11497 AND 6666 = 2056		28
				sw 		$s0, 84($0)			# dmem[80] = 2056					2c  // отсюда и ниже не работает

# Разрешение конфликта управления с помощью раннего вычисления условия перехода
				beq 	$t0, $s0, end 			# переход	
				and 	$s2, $s0, $s1			# выборка - обнуление на стадии D
				or  	$s2, $s4, $s0			
				sub 	$s2, $s0, $s5
				slt 	$t0, $s2, $s1
				add		$s2, $s2, $t1			# s2 = 6725 + 2056 = 8781
end:			sw 		$s2, 84($0)				# dmem[84] = 8781